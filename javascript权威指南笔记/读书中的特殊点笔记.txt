1.javascript中false的情况
	undefined
	null
	0
	-0
	''
	NaN

	对象都表示真[],{} 
	
2.包装对象
	String, Number, Boolean
	原始类型定义[不可变,不能添加属性只读]  var s = "a";[使用包装对象创建了一个临时的对象用完就删除了]
	引用类型[属于对象,可以添加属性] var s1 = new String("a");
	在这里
		s == s1 为true
		s === s1 为false   使用typeof s返回string   s1返回object
		
3.类型的转换
	
	10 + "object"  => 数字和字符串相加最终是字符串
	10 - "x"  => 数字和字符串相减,字符串会被转换为数字再作运算,字符串将使用强转换number()[必须是全数字的字符串  ];






第六章   对象
	
	对象的组成键值对
	
	可变的对象
	不可变的对象
	
	javascript中出了string number boolean null undefined[狭义的解释] 都是对象
	
	对象的属性的特性[在定义对象的属性的时候可以给他额外的设置特性,不做任何配置的时候都会有一个默认的值] {默认的都是可配置，可写，可枚举}
			a.可写 	[是否可以设置这个属性的值]
			b.可枚举       [是否可以用for/in 遍历出这个属性值]
			c.可配置       [是否可以修改删除该属性]
			d.value
	
	对象本身也会有3个重要的特性
			对象的原型
			对象的类型字符串
			对象的扩展标记
			
	对象的分类
		内置对象	[javascript规范定义的对象和类]
		宿主对象        [javascript运行的环境决定]
		自定义对象    [是由运行中的javascript创建的对象]
		
		自有属性	[直接在对象中定义的属性] (own)
		继承属性	[继承至原型对象上定义的属性](inherit)
	
	对象的创建方式
		1.字面量方式
		2.new 关键字方式
		3.ES5中的Object.create();
		
		1.字面量方式创建对象   [对象的属性定义的时候可以使用引号也可以不用][如果有连字符或者有空格必须要加引号][每次运算都会创建一个对象在循环体中不建议]
			var obj = {
				"title": "",
				aother: {
					"w": 1
				}
			}
		
		2.new 关键之创建对象
			new FunctionName()   [这种方式就是构造函数方式][原始类型都有自己的包装对象]

｛每一个对象都可以定义自己的属性,也可以从原型链上面继承属性下来,自己定义的属性会覆盖继承下来的属性,每个对象至少都有一个原型对象｝

		3.ES5 Object.create()   这是一个静态方法,可以传递连个参数   第一个参数是新创建的对象的原型, 第二个参数可以对对象的属性做配置
		这种方式适合要以某个对象为原型创建新的对象
		
		var pro = { x: 1, y: 2};
		var now = Object.create(pro);
		
		创建一个空对象 
		var emptyObj = Object.create(null);
		注意： 这种空对象是没有tostring valueof这种顶层原型方法的,它与 var s = {}, var s = new Object();创建的空对象是不一样的，如果要一样可以使用下面的方式
		var emptyObj = Object.create(Object.prototype);
		用inherit函数来模拟这种
		function inherit(p) {
			if( p == null ){
				throw TypeError();
			}
			if( Object.create ){
				return Object.create(p);
			}
			var t = typeof p;
			if( t !== "object" && t !== "function" ){
				throw TypeError();
			}
			var f = function(){};
			f.prototype = p;
			return new f();
		}
	
	作为关联数组的对象属性的访问方式
		obj.标识符
		obj[表达式]  =>  最后这个表达式要转换为一个字符串
	
	
在javascript中只有在查询的时候才会体验到继承的存在

	对象设置属性
		设置属性失败的可能性，不会报错
			1.对象的属性的特性是只读
			2.对象的属性是继承而来且是只读
			3.对象是不可扩展的对象
	
	属性的删除
		delete
		注意： 
			1.delete只能删除自有的属性，不能删除继承的属性
			2.delete只是断开属性和宿主对象的联系,而不会去操作属性中的属性
	
	属性的检查
		in 操作符   [在对象或者对象的原型中可以找到吗]
		var o = { x: 1}; x in o
		
		hasOwnProperty() [检查对象中摸个属性是否是自有属性还是继承属性]
		o.hasOwnProperty(x)
		
		o.propertyIsEnumerable(x) [这个是加强版本,自有属性并且是可枚举的才会返回true]
		
		通过javascript代码创建的属性都是可枚举的，除了用es5
		
		
为什么不建议在Object.prototype 上面直接扩展属性和方法,这样添加的属性和方法,后面的对象在使用for in遍历的时候也会遍历出来,就会产生一些奇怪的事情			
	
	枚举属性
		for/in 遍历对象的可枚举属性
		Object.keys(o) 返回对象可枚举的只有属性是一个数组
		Object.getOwnPropertyNames(o)
		
		function extend(o, p) {
			for(var prop in p){
				o[prop] = p[prop];
			}
			return o;
		}
		//合并属性,如果o中有的不覆盖
		function meger(o, p) {
			for(var prop in p){
				if( o.hasOwnProperty(prop) ) continue;
				o[prop] = p[prop];
			}
			return o;
		}
		
数据属性 | 存储器属性	
	属性 getter 和 setter [存储器属性][一般成对出现]
		定义方式
			1.字面量的方式定义存储器属性
				var obj = {
					x: 1,
					get a() {
						return this.x ++;
					},
					set a(value) {
						this.x = value;
					}
				}	


	属性的特性
	

	对象的三个属性
		
		原型属性 [对象的原型属性是用来继承属性的][o的原型]
		原型属性实在实例对象的时候就设立好的
			字面量创建的对象  使用Object.prototype 作为他们的原型      constructor ---> Object()
			new + 构造函数方式创建的对象   使用构造函数.propotype 作为他们的原型     constructor ---> 构造函数()
			Object.create() 方式创建的对象  使用传递的对象为他们的原型
			
		Object.getPropotypeOf()  获取某个对象的原型
		
		isPropotypeOf()  检查一个对象是不是其他对象的原型     o.isPropotypeOf(p)   o对象是p对象的原型吗


		类属性  [对象的类属性是一个字符串]
		
		可扩展性
	
		
	序列化对象
		toString() 
		valueOf()




第七章 数组




第八章 函数
	
	函数每次调用的时候都会拥有一个 本次调用上下文 this
	
	函数挂在在对象上面就是对象的方法,this就这项这个对象
	
	
	函数的定义
	
	
	函数的返回值
	
	
	嵌套的函数
		函数声明语句不能出现在循环 if判断 catch try 语句中
		函数定义表达式可以出现在任何地方
		
	函数的调用四种情况的调用
		1.作为函数的普通调用    			这个是时候的上下文 this 在飞严格模式下来this 就是window  严格模式下 undefined
		2.作为对象的方法来调用			this 指向当前调用的对象, 谁
		3.作为构造函数来调用
		4.通过call,apply方法来间接调用
		
		谁调用就指向谁,在函数中定义函数,this不会继承,不是window就是undefined,可以在外层使用变量来保存this，通过作用域是内部函数可以访问	
		
		构造函数调用,如果没参数括号可以不写
		var o = new Object(); b = new Object;
			构造函数调用时候做了什么
				1.创建了一个新的对象，新的对象继承至构造函数的propotype
				2.把这个新的对象作为函数的上下文,执行里面的初始化, 挂载他的constructor为构造函数
				3.在这个新的对象上面添加属性初始化
				4.返回这个新创建的对象
			构造函数在返回的时候
				如果没有return 默认返回新创建的对象
				如果有return  但返回的是原始类型,任然返回新创建的对象
				如果返回的是一个对象,新创建的对象别这个返回的对象替代
		
		间接调用
			函数本身也是对象,本身也有方法 call(), apply(), 第一个参数指定this是谁, bind()=>返回一个新的函数;
			任何的函数都可以做为任何对象的方法来调用,哪怕这个函数不是那个对象的方法
	
	函数的实参和形参
		
		实参对象,每个函数内都有一个实参对象arguments,里面更具顺序保存了传递进来的实参列表， arguments是一个类数组对象 可以使用Array.prototype.slice.call(arguments)来转换为数组;
		函数,length 返回参数的个数
		
		不定实参的函数
		
	将对象的属性用作实参
		函数要传递的参数很多的时候，就可以把所有的参数定义在一个对象中，直接传递一个对象进去就可以了
		  
	实参的类型检查
	
	作为值的函数
		把函数当作值传递给函数使用
		
	自定义函数的属性
		
	作为命名空间的函数
		使用匿名函数来创建独立的空间,隐藏私有的,想外公布公共api
		
	闭包
		重要： 函数的作用域实在定义的时候确定的，而不是在调用的时候决定
		
		变量作用域,作用域链
		
		函数在调用的时候任然会保存他的作用域链
		

		bind() 方法,重新绑定函数的上下文,返回一个新函数 [这个可以实现柯丽华函数]
	
	
	Function()构造函数


	高级函数
		操作函数的函数, 接受一个或者多个函数为参数并返回一个新函数
		



第九章 类和模块
	javascript中的类是基于原型继承机制来实现的
	javascript中类的一个重要特性： 动态可继承
	定义类是模块开发和重用代码的有效方式之一
	
	类和原型
		工厂方式实现  
	
	类和构造函数
		new + 构造函数
	
	每个javascript函数都自拥有一个prototype属性,它的值是一个对象,这个对象上面有一个不可枚举的属性constructor 指向构造函数本身
		