指令是操作被绑定的Dom元素+
指令：[在dom上面把对象的属性与vue实例中定义的数据变量或者方法绑定,在rander的时候解析为对应的数据]
	[指令都是添加在dom的元素属性中的][指令处理元素的属性，事件，样式]
	v-bind:   [绑定变量到属性]
	v-if:     [条件分支判断]{可以控制元素的显示这里是不会渲染,这里和v-show有点不一样这个这是添加display:none}
	else	  [v-if 与 v-else]两个指令要紧挨着
			  [会出现元素重用的现象][解决重用的现象就是定义一个唯一的key值]
			  
	v-for:    [循环指令]
	v-on:     [在DOM上面绑定事件监听事件关联实例中定义的method方法]
	v-model:  [在表单中做数据的双向绑定]{这里其实是用另外一种绑定来实现的}
	v-once:   [绑定一次,这个会影响到该节点上面所以的数据绑定]
	v-html：     [插入html值道标签中]
	
	指令的参数[]
	b-bind:href="url"  将元素的href属性与表达式url的值绑定
	
	指令的修饰符[参数后面使用. 修饰符是实例中内置的]
	b-on:click.prevent = "";
	
	指令的缩写：
		v-bind:    =>  :href=""
		v-on:click =>  @click=""
	 

	
组件：[一个组件其 实就是一个拥有预定义的vue实例,它有细微的一点区别,在定义数据的时候需要用函数来返回][所有的组件都是被扩展的实例]
	[一个组件的基本组成,可以抽离出它的模版(html结构),样式(css样式),事件处理(javascript事件处理程序)]
	[组件是独立的,一个组件也可以是多个组件平凑的]
	[把页面应用抽象为一个组件树]
	[父子组件之间可以通过prop传递数据到子组件中]
	[一个组件其实就是一个自定义的html标签]
	[一个组件必须有一个根元素,组件内的东西都放在根元素里面]
	
	定义组件： [定义组件实际上是使用vue上面的一个静态方法来定义的]
		var compent = Vue.component("组件名称", {预定义的数据});

包装元素：
	在一些判断中需要使用到一个区块.可以使用<template> 标签来包裹,他不会添加到页面中只是把他里面的类容

Vue的应用是使用vue创建一个跟实例来启动
	可以把一个单页作为一个应用
	可以把多个页面当作一个应用
	

Vue实例的生命周期

vue实例中data属性定义的数据对象会在vue实例上面创建引用对象

Vue上面的静态方式
	Vue.component()
	Vue.extend()  [扩展Vue,返回一个新的对象]
	
	Vue实例暴露了一些实例属性和方法, 指向的内部的关联对象,使用$做前缀
	
html属性中不能使用插值 类似这样的  <h1 title="{{message}}"></h1> 使用v-bind:title="" 来绑定
	
插值和属性指令到可以使用简单的表达式,但是语句是不容许的

过虑器 [主要作用是处理文本] filter
	使用在插值中和v-bind绑定表达式中
	

计算属性 [解决模版中过多逻辑,减少复杂度] [需要复杂的逻辑的时候最好使用计算属性]
	
	计算属性实现的功能可以通过method方式一样可以实现,但是计算属性是依赖的数据改变了它才会改变,方法是每次都会调用执行,计算属性会把计算的结果缓存,如果依赖项没有改变缓存的结果也不会改变
	
	计算属性默认只有getter,也可以手动自己设置setter
	
watchers 监听属性变化,异步处理数据,api请求或者大量的计算


class 与  style   属性绑定都是使用的字符串, class和style 增强了表达式返回的结果可以是数组和对象
class和style中使用字符串的画,字符拼接很麻烦的,所以扩展它使用对象或者数组的方式更好

使用对象给class关联属性的时候： 对象的键为要返回的class字符串, 当对象的键的值为true的时候才会返回键
使用数组给class关联属性的时候：直接使用数组格式里面的元素是一个实例的属性,取属性的值就对了

使用对象给style 添加样式    v-bind:style="{color: 'red', font-size: '12px'}"
使用数组给style 数组的每个元素是一个对象


在实例画vue实例,预定义数据的时候
data 属性的定义中不能使用this来引用,使用this会让属性为undefined [这种就可以使用计算属性来解决这种问题]


列表渲染：
	v-for
	<div v-for="(item, key, index) in items">
		{{ item }}   ===>如果这里有多行样式,多个标签嵌套的话,就需要使用包装原来实现
	</div>
	items 一般来应该定义为数组,也可以是对象是对象的话就是遍历可枚举的属性,object.keys()
	
	
事件处理器：
	v-on 